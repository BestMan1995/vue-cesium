(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ 732:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/vue/dist/vue.esm-browser.js
var vue_esm_browser = __webpack_require__(0);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/dist/templateLoader.js??ref--6!./node_modules/vue-loader/dist??ref--2-0!./website/md-loader!./website/docs/en-US/base.md?vue&type=template&id=9d710006

const _hoisted_1 = {
  class: "content element-doc"
};

const _hoisted_2 = /*#__PURE__*/Object(vue_esm_browser["createStaticVNode"])("<h2 id=\"base\"><a class=\"header-anchor\" href=\"#base\">¶</a> Base</h2><h3 id=\"global-component-events\"><a class=\"header-anchor\" href=\"#global-component-events\">¶</a> Global component events</h3><div class=\"tip\"><p>Tip: All components of vue-cesium include these events, and subsequent documents may not list them again.</p></div><table><thead><tr><th>Name</th><th>Parameters</th><th>Description</th></tr></thead><tbody><tr><td>beforeLoad</td><td>Vue Instance</td><td>Triggers before the cesiumObject is loaded.</td></tr><tr><td>ready</td><td>{Cesium, viewer, cesiumObject, vm}</td><td>Triggers when the cesiumObject is successfully loaded.</td></tr><tr><td>destroyed</td><td>Vue Instance</td><td>Triggers when the cesiumObject is destroyed.</td></tr></tbody></table><h3 id=\"global-component-instance-method\"><a class=\"header-anchor\" href=\"#global-component-instance-method\">¶</a> Global component instance method</h3><div class=\"tip\"><p>Tip: All components of vue-cesium include these 4 methods, which may not be listed in subsequent documents.</p></div><table><thead><tr><th>Name</th><th>Parameters</th><th>Description</th></tr></thead><tbody><tr><td>load</td><td></td><td>Load the component.</td></tr><tr><td>unload</td><td></td><td>Uninstall the component.</td></tr><tr><td>reload</td><td></td><td>Complete a component unloading/reloading method.</td></tr><tr><td>getCesiumObject</td><td>Object</td><td>Get the Cesium object or HTMLElement loaded by this component.</td></tr></tbody></table><h3 id=\"constants\"><a class=\"header-anchor\" href=\"#constants\">¶</a> Constants</h3><p>Since Cesium cannot be obtained before the initialization of the <code>vc-viewer</code> component is completed, some constants of Cesium cannot be obtained directly through Cesium when the component is bound, but it is still possible to pass their values directly.</p><div class=\"tipflex\"><pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&lt;!-- Wrong way --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">vc-viewer</span> <span class=\"hljs-attr\">:sceneMode</span>=<span class=\"hljs-string\">&quot;Cesium.SceneMode.SCENE3D&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">vc-viewer</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&lt;!-- Right way --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">vc-viewer</span> <span class=\"hljs-attr\">:sceneMode</span>=<span class=\"hljs-string\">&quot;3&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">vc-viewer</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre></div><h4 id=\"horizontalorigin\"><a class=\"header-anchor\" href=\"#horizontalorigin\">¶</a> HorizontalOrigin</h4><p>The horizontal location of an origin relative to an object, e.g., a Billboard or Label. For example, setting the horizontal origin to LEFT or RIGHT will display a billboard to the left or right (in screen space) of the anchor position.</p><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>CENTER</td><td>0</td><td>The origin is at the horizontal center of the object.</td></tr><tr><td>LEFT</td><td>1</td><td>The origin is on the left side of the object.</td></tr><tr><td>RIGHT</td><td>-1</td><td>The origin is on the right side of the object.</td></tr></tbody></table><h4 id=\"verticalorigin\"><a class=\"header-anchor\" href=\"#verticalorigin\">¶</a> VerticalOrigin</h4><p>The vertical location of an origin relative to an object, e.g., a Billboard or Label. For example, setting the vertical origin to TOP or BOTTOM will display a billboard above or below (in screen space) the anchor position.</p><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>CENTER</td><td>0</td><td>The origin is at the vertical center between BASELINE and TOP.</td></tr><tr><td>BOTTOM</td><td>1</td><td>The origin is at the bottom of the object.</td></tr><tr><td>BASELINE</td><td>2</td><td>If the object contains text, the origin is at the baseline of the text, else the origin is at the bottom of the object.</td></tr><tr><td>TOP</td><td>-1</td><td>The origin is at the top of the object.</td></tr></tbody></table><h4 id=\"heightreference\"><a class=\"header-anchor\" href=\"#heightreference\">¶</a> HeightReference</h4><p>Represents the position relative to the terrain.</p><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>NONE</td><td>0</td><td>The position is absolute.</td></tr><tr><td>CLAMP_TO_GROUND</td><td>1</td><td>The position is clamped to the terrain.</td></tr><tr><td>RELATIVE_TO_GROUND</td><td>2</td><td>The position height is the height above the terrain.</td></tr></tbody></table><h4 id=\"shadowmode\"><a class=\"header-anchor\" href=\"#shadowmode\">¶</a> ShadowMode</h4><p>Specifies whether the object casts or receives shadows from light sources when shadows are enabled.</p><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>DISABLED</td><td>0</td><td>The object does not cast or receive shadows.</td></tr><tr><td>ENABLED</td><td>1</td><td>The object casts and receives shadows.</td></tr><tr><td>CAST_ONLY</td><td>2</td><td>The object casts shadows only.</td></tr><tr><td>RECEIVE_ONLY</td><td>3</td><td>The object receives shadows only.</td></tr></tbody></table><h4 id=\"cornertype\"><a class=\"header-anchor\" href=\"#cornertype\">¶</a> CornerType</h4><p>Style options for corners.</p><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>ROUNDED</td><td>0</td><td>Corner has a smooth edge.</td></tr><tr><td>MITERED</td><td>1</td><td>Corner point is the intersection of adjacent edges.</td></tr><tr><td>BEVELED</td><td>2</td><td>Corner is clipped.</td></tr></tbody></table><h4 id=\"classificationtype\"><a class=\"header-anchor\" href=\"#classificationtype\">¶</a> ClassificationType</h4><p>Whether a classification affects terrain, 3D Tiles or both.</p><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>TERRAIN</td><td>0</td><td>Only terrain will be classified.</td></tr><tr><td>CESIUM_3D_TILE</td><td>1</td><td>Only 3D Tiles will be classified.</td></tr><tr><td>BOTH</td><td>2</td><td>Both terrain and 3D Tiles will be classified.</td></tr></tbody></table><h4 id=\"bingmapsstyle\"><a class=\"header-anchor\" href=\"#bingmapsstyle\">¶</a> BingMapsStyle</h4><p>The types of imagery provided by Bing Maps.</p><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>AERIAL</td><td>&#39;Aerial&#39;</td><td>Aerial imagery.</td></tr><tr><td>AERIAL_WITH_LABELS</td><td>&#39;AerialWithLabels&#39;</td><td>Aerial imagery with a road overlay.</td></tr><tr><td>AERIAL_WITH_LABELS_ON_DEMAND</td><td>&#39;AerialWithLabelsOnDemand&#39;</td><td>Aerial imagery with a road overlay.</td></tr><tr><td>ROAD</td><td>&#39;Road&#39;</td><td>Roads without additional imagery.</td></tr><tr><td>ROAD_ON_DEMAND</td><td>&#39;RoadOnDemand&#39;</td><td>Roads without additional imagery.</td></tr><tr><td>CANVAS_DARK</td><td>&#39;CanvasDark&#39;</td><td>A dark version of the road maps.</td></tr><tr><td>CANVAS_LIGHT</td><td>&#39;CanvasGray&#39;</td><td>A lighter version of the road maps.</td></tr><tr><td>CANVAS_GRAY</td><td>&#39;CanvasLight&#39;</td><td>A grayscale version of the road maps.</td></tr><tr><td>ORDNANCE_SURVEY</td><td>&#39;OrdnanceSurvey&#39;</td><td>Ordnance Survey imagery. This imagery is visible only for the London, UK area.</td></tr><tr><td>COLLINS_BART</td><td>&#39;CollinsBart&#39;</td><td>Collins Bart imagery.</td></tr></tbody></table><h4 id=\"labelstyle\"><a class=\"header-anchor\" href=\"#labelstyle\">¶</a> LabelStyle</h4><p>Describes how to draw a label.</p><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>FILL</td><td>0</td><td>Fill the text of the label, but do not outline.</td></tr><tr><td>OUTLINE</td><td>1</td><td>Outline the text of the label, but do not fill.</td></tr><tr><td>FILL_AND_OUTLINE</td><td>2</td><td>Fill and outline the text of the label.</td></tr></tbody></table><h4 id=\"arctype\"><a class=\"header-anchor\" href=\"#arctype\">¶</a> ArcType</h4><p>ArcType defines the path that should be taken connecting vertices.</p><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>NONE</td><td>0</td><td>Straight line that does not conform to the surface of the ellipsoid.</td></tr><tr><td>GEODESIC</td><td>1</td><td>Follow geodesic path.</td></tr><tr><td>RHUMB</td><td>2</td><td>Follow rhumb or loxodrome path.</td></tr></tbody></table><h4 id=\"scenemode\"><a class=\"header-anchor\" href=\"#scenemode\">¶</a> SceneMode</h4><p>Indicates if the scene is viewed in 3D, 2D, or 2.5D Columbus view.</p><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>MORPHING</td><td>0</td><td>Morphing between mode, e.g., 3D to 2D.</td></tr><tr><td>COLUMBUS_VIEW</td><td>1</td><td>Columbus View mode. A 2.5D perspective view where the map is laid out flat and objects with non-zero height are drawn above it.</td></tr><tr><td>SCENE2D</td><td>2</td><td>2D mode. The map is viewed top-down with an orthographic projection.</td></tr><tr><td>SCENE3D</td><td>3</td><td>3D mode. A traditional 3D perspective view of the globe.</td></tr></tbody></table><h4 id=\"mapmode2d\"><a class=\"header-anchor\" href=\"#mapmode2d\">¶</a> MapMode2D</h4><p>Describes how the map will operate in 2D.</p><table><thead><tr><th>Name</th><th>Value</th><th>Description</th></tr></thead><tbody><tr><td>ROTATE</td><td>0</td><td>The 2D map can be rotated about the z axis.</td></tr><tr><td>INFINITE_SCROLL</td><td>1</td><td>The 2D map can be scrolled infinitely in the horizontal direction.</td></tr></tbody></table><h4 id=\"reference\"><a class=\"header-anchor\" href=\"#reference\">¶</a> Reference</h4><blockquote><p><strong><a href=\"https://cesium.com/docs/cesiumjs-ref-doc/global.html\">Official document</a></strong></p></blockquote><h3 id=\"datatype\"><a class=\"header-anchor\" href=\"#datatype\">¶</a> Datatype</h3><p>The parameter passing of each component of <code>vue-cesium</code> supports directly passing the parameters of Cesium instantiation, but because Cesium cannot get it before the completion of the <code>vc-viewer</code> component initialization, so if it is to pass the parameters of the Cesium instance, it needs to be in <code>vc-viewer</code> These parameters are initialized after the component <code>ready</code> event. In order to simplify development, some commonly used parameters are abstracted into PlainObjects, which can be assigned in advance.</p><div class=\"tipflex\"><pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&lt;!-- Complete writing --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">vc-viewer</span> @<span class=\"hljs-attr\">ready</span>=<span class=\"hljs-string\">&quot;onViewerReady&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">vc-entity</span> <span class=\"hljs-attr\">:position</span>=<span class=\"hljs-string\">&quot;position&quot;</span> <span class=\"hljs-attr\">:point</span>=<span class=\"hljs-string\">&quot;point&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">vc-entity</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">vc-viewer</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-title function_\">data</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-keyword\">return</span> {\n        <span class=\"hljs-attr\">position</span>: <span class=\"hljs-literal\">null</span>,\n        <span class=\"hljs-attr\">point</span>: <span class=\"hljs-literal\">null</span>\n      }\n    },\n    <span class=\"hljs-attr\">methods</span>: {\n      <span class=\"hljs-title function_\">onViewerReady</span>(<span class=\"hljs-params\">{ Cesium, viewer }</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">position</span> = <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Cartesian3</span>.<span class=\"hljs-title function_\">fromDegrees</span>(<span class=\"hljs-number\">108</span>, <span class=\"hljs-number\">35</span>, <span class=\"hljs-number\">1000</span>)\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">point</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-title class_\">PointGraphics</span>({\n          <span class=\"hljs-attr\">pixelSize</span>: <span class=\"hljs-number\">28</span>,\n          <span class=\"hljs-attr\">color</span>: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Color</span>.<span class=\"hljs-property\">RED</span>\n        })\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&lt;!-- Suggested writing --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">vc-viewer</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">vc-entity</span> <span class=\"hljs-attr\">:position</span>=<span class=\"hljs-string\">&quot;[108, 35, 1000]&quot;</span> <span class=\"hljs-attr\">:point</span>=<span class=\"hljs-string\">&quot;{pixelSize: 28, color: &#39;red&#39;}&quot;</span>&gt;</span> <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">vc-entity</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">vc-viewer</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre></div><p>The following are described separately:</p><h3 id=\"cartesian2\"><a class=\"header-anchor\" href=\"#cartesian2\">¶</a> Cartesian2</h3><p>There are 2 ways to express <code>Cesium.Cartesian2</code>:</p><ul><li><code>Cartesian2Option</code></li></ul><pre><code class=\"hljs language-js\">interface <span class=\"hljs-title class_\">Cartesian</span>2Option {\n  <span class=\"hljs-attr\">x</span>: number\n  <span class=\"hljs-attr\">y</span>: number\n}\n</code></pre><ul><li><code>Array&lt;number&gt;</code></li></ul><pre><code class=\"hljs language-js\">;[number, number]\n</code></pre><h3 id=\"array-cartesian2\"><a class=\"header-anchor\" href=\"#array-cartesian2\">¶</a> Array&lt;Cartesian2&gt;</h3><p>There are 2 ways to express <code>Array&lt;Cartesian2&gt;</code>:</p><ul><li><code>Array&lt;Cartesian2Option&gt;</code></li></ul><pre><code class=\"hljs language-js\">[{ <span class=\"hljs-attr\">x</span>: number,  <span class=\"hljs-attr\">y</span>: number }, ..., { <span class=\"hljs-attr\">x</span>: number,  <span class=\"hljs-attr\">y</span>: number }]\n</code></pre><ul><li><code>Array&lt;Array&lt;number&gt;&gt;</code></li></ul><pre><code class=\"hljs language-js\">[[<span class=\"hljs-attr\">x</span>: number, <span class=\"hljs-attr\">y</span>: number],..., [<span class=\"hljs-attr\">x</span>: number, <span class=\"hljs-attr\">y</span>: number]]\n</code></pre><h3 id=\"cartesian3\"><a class=\"header-anchor\" href=\"#cartesian3\">¶</a> Cartesian3</h3><p>There are 3 ways to express <code>Cesium.Cartesian3</code>:</p><ul><li><code>Cartesian3Option</code></li></ul><pre><code class=\"hljs language-js\">interface <span class=\"hljs-title class_\">Cartesian</span>3Option {\n  <span class=\"hljs-attr\">x</span>: number\n  <span class=\"hljs-attr\">y</span>: number\n  <span class=\"hljs-attr\">z</span>: number\n}\n</code></pre><ul><li><code>CartographicInDegreeOption</code></li></ul><pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// in degrees</span>\ninterface <span class=\"hljs-title class_\">CartographicInDegreeOption</span> {\n  <span class=\"hljs-attr\">lng</span>: number\n  <span class=\"hljs-attr\">lat</span>: number\n  height?: number\n}\n</code></pre><ul><li><code>Array&lt;number&gt;</code></li></ul><pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// in degrees</span>\n;[(<span class=\"hljs-attr\">lng</span>: number), (<span class=\"hljs-attr\">lat</span>: number), (<span class=\"hljs-attr\">height</span>: number)]\n</code></pre><h3 id=\"array-cartesian3\"><a class=\"header-anchor\" href=\"#array-cartesian3\">¶</a> Array&lt;Cartesian3&gt;</h3><p>There are 4 ways to express <code>Array&lt;Cartesian3&gt;</code>:</p><ul><li><code>Array&lt;Cartesian3Option&gt;</code></li></ul><pre><code class=\"hljs language-js\">\n[{ <span class=\"hljs-attr\">x</span>: number, <span class=\"hljs-attr\">y</span>: number, <span class=\"hljs-attr\">z</span>: number },...,{ <span class=\"hljs-attr\">x</span>: number, <span class=\"hljs-attr\">y</span>: number, <span class=\"hljs-attr\">z</span>: number }]\n</code></pre><ul><li><code>Array&lt;CartographicInDegreeOption&gt;</code></li></ul><pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// in degrees</span>\n[{ <span class=\"hljs-attr\">lng</span>: number, <span class=\"hljs-attr\">lat</span>: number, height?: number },..., { <span class=\"hljs-attr\">lng</span>: number, <span class=\"hljs-attr\">lat</span>: number, height?: number }]\n</code></pre><ul><li><code>Array&lt;number&gt;</code></li></ul><pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// in degrees</span>\n[<span class=\"hljs-attr\">lng</span>: number, <span class=\"hljs-attr\">lat</span>: number, <span class=\"hljs-attr\">height</span>: number, ..., <span class=\"hljs-attr\">lng</span>: number, <span class=\"hljs-attr\">lat</span>: number, <span class=\"hljs-attr\">height</span>: number]\n</code></pre><ul><li><code>Array&lt;Array&lt;number&gt;&gt;</code></li></ul><pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// in degrees</span>\n[[<span class=\"hljs-attr\">lng</span>: number, <span class=\"hljs-attr\">lat</span>: number, <span class=\"hljs-attr\">height</span>: number], ..., [<span class=\"hljs-attr\">lng</span>: number, <span class=\"hljs-attr\">lat</span>: number, <span class=\"hljs-attr\">height</span>: number]]\n</code></pre><h3 id=\"cartesian4\"><a class=\"header-anchor\" href=\"#cartesian4\">¶</a> Cartesian4</h3><p>There are 2 ways to express <code>Cesium.Cartesian4</code>:</p><ul><li><code>Cartesian4Option</code></li></ul><pre><code class=\"hljs language-js\">interface <span class=\"hljs-title class_\">Cartesian</span>4Option {\n  x?: number\n  y?: number\n  z?: number\n  w?: number\n}\n</code></pre><ul><li><code>Array&lt;number&gt;</code></li></ul><pre><code class=\"hljs language-js\">;[(<span class=\"hljs-attr\">x</span>: number), (<span class=\"hljs-attr\">y</span>: number), (<span class=\"hljs-attr\">z</span>: number), (<span class=\"hljs-attr\">w</span>: number)]\n</code></pre><h3 id=\"rectange-coordinates\"><a class=\"header-anchor\" href=\"#rectange-coordinates\">¶</a> Rectange(coordinates)</h3><p>There are 3 ways to express <code>Cesium.Rectange</code>:</p><ul><li><code>RectangleInDegreeOption</code></li></ul><pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// in degrees</span>\ninterface <span class=\"hljs-title class_\">RectangleInDegreeOption</span> {\n  <span class=\"hljs-attr\">west</span>: number\n  <span class=\"hljs-attr\">south</span>: number\n  <span class=\"hljs-attr\">east</span>: number\n  <span class=\"hljs-attr\">north</span>: number\n}\n</code></pre><ul><li><code>Cartesian4Option</code></li></ul><pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// in radian</span>\ninterface <span class=\"hljs-title class_\">Cartesian</span>4Option {\n  x?: number\n  y?: number\n  z?: number\n  w?: number\n}\n</code></pre><ul><li><code>Array&lt;number&gt;</code></li></ul><pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// // in degrees</span>\n;[(<span class=\"hljs-attr\">west</span>: number), (<span class=\"hljs-attr\">south</span>: number), (<span class=\"hljs-attr\">east</span>: number), (<span class=\"hljs-attr\">north</span>: number)]\n</code></pre><h3 id=\"camera\"><a class=\"header-anchor\" href=\"#camera\">¶</a> Camera</h3><p>There are 1 ways to express <code>Cesium.Camera</code>:</p><ul><li><code>CameraOption</code></li></ul><pre><code class=\"hljs language-js\">interface <span class=\"hljs-title class_\">CameraOption</span> {\n  position?: <span class=\"hljs-title class_\">Cartesian</span>3Option | <span class=\"hljs-title class_\">CartographicInDegreeOption</span> | <span class=\"hljs-title class_\">Array</span>&lt;number&gt;\n  retangle?: <span class=\"hljs-title class_\">RectangleInDegreeOption</span> | <span class=\"hljs-title class_\">Array</span>&lt;number&gt;\n  heading?: number\n  pitch?: number\n  roll?: number\n}\n</code></pre><h3 id=\"polygonhierarchy\"><a class=\"header-anchor\" href=\"#polygonhierarchy\">¶</a> PolygonHierarchy</h3><p>There are 2 ways to express <code>Cesium.PolygonHierarchy</code>:</p><ul><li><code>PolygonHierarchyOption</code></li></ul><pre><code class=\"hljs language-js\">interface <span class=\"hljs-title class_\">PolygonHierarchyOption</span> {\n  <span class=\"hljs-attr\">positions</span>: <span class=\"hljs-title class_\">Array</span>&lt;<span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Cartesian3</span>&gt; | <span class=\"hljs-title class_\">Array</span>&lt;<span class=\"hljs-title class_\">Cartesian</span>3Option&gt; | <span class=\"hljs-title class_\">Array</span>&lt;<span class=\"hljs-title class_\">Array</span>&lt;number&gt;&gt;\n  holes?: <span class=\"hljs-title class_\">Array</span>&lt;<span class=\"hljs-title class_\">PolygonHierarchyOption</span>&gt;\n}\n</code></pre><ul><li><code>Array&lt;Cartesian3Option&gt;</code></li></ul><pre><code class=\"hljs language-js\">[{<span class=\"hljs-attr\">lng</span>: number, <span class=\"hljs-attr\">lat</span>: number, <span class=\"hljs-attr\">height</span>: number},...,{<span class=\"hljs-attr\">lng</span>: number, <span class=\"hljs-attr\">lat</span>: number, <span class=\"hljs-attr\">height</span>: number}]\n</code></pre><h3 id=\"nearfarscalar\"><a class=\"header-anchor\" href=\"#nearfarscalar\">¶</a> NearFarScalar</h3><p>There are 2 ways to express <code>Cesium.NearFarScalar</code>:</p><ul><li><code>NearFarScalarOption</code></li></ul><pre><code class=\"hljs language-js\">interface <span class=\"hljs-title class_\">NearFarScalarOption</span> {\n  <span class=\"hljs-attr\">near</span>: number\n  <span class=\"hljs-attr\">nearValue</span>: number\n  <span class=\"hljs-attr\">far</span>: number\n  <span class=\"hljs-attr\">farValue</span>: number\n}\n</code></pre><ul><li><code>Array&lt;number&gt;</code></li></ul><pre><code class=\"hljs language-js\">[<span class=\"hljs-attr\">near</span>: number, <span class=\"hljs-attr\">nearValue</span>: number, <span class=\"hljs-attr\">far</span>: number, <span class=\"hljs-attr\">farValue</span>: number, ..., <span class=\"hljs-attr\">near</span>: number, <span class=\"hljs-attr\">nearValue</span>: number, <span class=\"hljs-attr\">far</span>: number, <span class=\"hljs-attr\">farValue</span>: number]\n</code></pre><h3 id=\"distancedisplaycondition\"><a class=\"header-anchor\" href=\"#distancedisplaycondition\">¶</a> DistanceDisplayCondition</h3><p>There are 2 ways to express <code>Cesium.DistanceDisplayCondition</code>:</p><ul><li><code>DistanceDisplayConditionOption</code></li></ul><pre><code class=\"hljs language-js\">interface <span class=\"hljs-title class_\">DistanceDisplayConditionOption</span> {\n  <span class=\"hljs-attr\">near</span>: number\n  <span class=\"hljs-attr\">far</span>: number\n}\n</code></pre><ul><li><code>Array&lt;number&gt;</code></li></ul><pre><code class=\"hljs language-js\">[<span class=\"hljs-attr\">near</span>: number, <span class=\"hljs-attr\">far</span>: number, ..., <span class=\"hljs-attr\">near</span>: number, <span class=\"hljs-attr\">far</span>: number]\n</code></pre><h3 id=\"color\"><a class=\"header-anchor\" href=\"#color\">¶</a> Color</h3><p>There are 4 ways to express <code>Cesium.Color</code>:</p><ul><li><code>string</code></li></ul><pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// css color</span>\n<span class=\"hljs-string\">&#39;white&#39;</span>\n<span class=\"hljs-string\">&#39;#fff&#39;</span>\n<span class=\"hljs-string\">&#39;rgba(255,255,255,0)&#39;</span>\n</code></pre><ul><li><code>Array&lt;number&gt;</code></li></ul><pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// in byte</span>\n;[(<span class=\"hljs-attr\">r</span>: number), (<span class=\"hljs-attr\">g</span>: number), (<span class=\"hljs-attr\">b</span>: number), (<span class=\"hljs-attr\">a</span>: number)]\n</code></pre><ul><li><code>ColorInByteOption</code></li></ul><pre><code class=\"hljs language-js\">interface <span class=\"hljs-title class_\">ColorInByteOption</span> {\n  <span class=\"hljs-attr\">red</span>: number\n  <span class=\"hljs-attr\">green</span>: number\n  <span class=\"hljs-attr\">blue</span>: number\n  alpha?: number\n}\n</code></pre><ul><li><code>Cartesian4Option</code></li></ul><pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// The range is from 0 (no intensity) to 1.0 (full intensity).</span>\ninterface <span class=\"hljs-title class_\">Cartesian</span>4Option {\n  x?: number\n  y?: number\n  z?: number\n  w?: number\n}\n</code></pre><h3 id=\"material\"><a class=\"header-anchor\" href=\"#material\">¶</a> Material</h3><p>There are 3 ways to express <code>Cesium.Material</code>, <code>Cesium.MaterialProperty</code>:</p><ul><li><code>string</code></li></ul><pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// color or image url</span>\n<span class=\"hljs-string\">&#39;red&#39;</span>\n<span class=\"hljs-string\">&#39;https://zouyaoji.top/vue-cesium/favicon.png&#39;</span>\n</code></pre><ul><li><code>Array&lt;number&gt;</code></li></ul><pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// color</span>\n;[<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>]\n</code></pre><ul><li><code>MaterialOption</code></li></ul><pre><code class=\"hljs language-js\">interface <span class=\"hljs-title class_\">MaterialOption</span> {\n    <span class=\"hljs-attr\">fabric</span>: {\n    <span class=\"hljs-attr\">type</span>: string\n    <span class=\"hljs-attr\">uniforms</span>: {\n      color?: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Color</span> | string | <span class=\"hljs-title class_\">Array</span>&lt;number&gt; | <span class=\"hljs-title class_\">ColorInByteOption</span> | <span class=\"hljs-title class_\">Cartesian</span>4Option\n      image?: string | HTMLImageElement | HTMLCanvasElement | HTMLVideoElement\n      repeat?: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Cartesian2</span> | <span class=\"hljs-title class_\">Cartesian</span>2Option | <span class=\"hljs-title class_\">Array</span>&lt;number&gt; | number\n      transparent?: boolean\n      evenColor?: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Color</span> | string | <span class=\"hljs-title class_\">Array</span>&lt;number&gt; | <span class=\"hljs-title class_\">ColorInByteOption</span> | <span class=\"hljs-title class_\">Cartesian</span>4Option\n      oddColor?: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Color</span> | string | <span class=\"hljs-title class_\">Array</span>&lt;number&gt; | <span class=\"hljs-title class_\">ColorInByteOption</span> | <span class=\"hljs-title class_\">Cartesian</span>4Option\n      gapColor?: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Color</span> | string | <span class=\"hljs-title class_\">Array</span>&lt;number&gt; | <span class=\"hljs-title class_\">ColorInByteOption</span> | <span class=\"hljs-title class_\">Cartesian</span>4Option\n      dashLength?: number\n      dashPattern?: number\n      glowPower?: number\n      taperPower?: number\n      outlineColor?: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Color</span> | string | <span class=\"hljs-title class_\">Array</span>&lt;number&gt; | <span class=\"hljs-title class_\">ColorInByteOption</span> | <span class=\"hljs-title class_\">Cartesian</span>4Option\n      outlineWidth?: number\n      cellAlpha?: number\n      lineCount?: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Cartesian2</span> | <span class=\"hljs-title class_\">Cartesian</span>2Option | <span class=\"hljs-title class_\">Array</span>&lt;number&gt; | number\n      lineThickness?: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Cartesian2</span> | <span class=\"hljs-title class_\">Cartesian</span>2Option | <span class=\"hljs-title class_\">Array</span>&lt;number&gt; | number\n      lineOffset?: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Cartesian2</span> | <span class=\"hljs-title class_\">Cartesian</span>2Option | <span class=\"hljs-title class_\">Array</span>&lt;number&gt; | number\n      orientation?: number | <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">StripeOrientation</span>\n      offset?: number\n    }\n  }\n  strict?: boolean\n  translucent?: boolean | <span class=\"hljs-title class_\">AnyFunction</span>\n  minificationFilter?: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">TextureMinificationFilter</span>\n  magnificationFilter?: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">TextureMagnificationFilter</span>\n}\n</code></pre><h3 id=\"boundingrectangle\"><a class=\"header-anchor\" href=\"#boundingrectangle\">¶</a> BoundingRectangle</h3><p>There are 2 ways to express <code>Cesium.BoundingRectangle</code>:</p><ul><li><code>BoundingRectangleOption</code></li></ul><pre><code class=\"hljs language-js\">interface <span class=\"hljs-title class_\">BoundingRectangleOption</span> {\n  <span class=\"hljs-attr\">x</span>: number\n  <span class=\"hljs-attr\">y</span>: number\n  <span class=\"hljs-attr\">width</span>: number\n  <span class=\"hljs-attr\">height</span>: number\n}\n</code></pre><ul><li><code>Array&lt;number&gt;</code></li></ul><pre><code class=\"hljs language-js\">;[(<span class=\"hljs-attr\">x</span>: number), (<span class=\"hljs-attr\">y</span>: number), (<span class=\"hljs-attr\">width</span>: number), (<span class=\"hljs-attr\">height</span>: number)]\n</code></pre><h3 id=\"plane\"><a class=\"header-anchor\" href=\"#plane\">¶</a> Plane</h3><p>There are 2 ways to express <code>Cesium.Plane</code>:</p><ul><li><code>PlaneOption</code></li></ul><pre><code class=\"hljs language-js\">interface <span class=\"hljs-title class_\">PlaneOption</span> {\n  <span class=\"hljs-attr\">normal</span>: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Cartesian3</span> | <span class=\"hljs-title class_\">Cartesian</span>3Option | <span class=\"hljs-title class_\">CartographicInDegreeOption</span> | <span class=\"hljs-title class_\">Array</span>&lt;number&gt;\n  <span class=\"hljs-attr\">distance</span>: number\n}\n</code></pre><ul><li><code>Array&lt;any&gt;</code></li></ul><pre><code class=\"hljs language-js\">;[(<span class=\"hljs-attr\">plane</span>: <span class=\"hljs-title class_\">Array</span>&lt;number&gt; | <span class=\"hljs-title class_\">Array</span>&lt;<span class=\"hljs-title class_\">Cartesian</span>3Option&gt;), (<span class=\"hljs-attr\">distance</span>: number)]\n</code></pre><h3 id=\"translationrotationscale\"><a class=\"header-anchor\" href=\"#translationrotationscale\">¶</a> TranslationRotationScale</h3><p>There are 2 ways to express <code>Cesium.TranslationRotationScale</code>:</p><ul><li><code>TranslationRotationScaleOption</code></li></ul><pre><code class=\"hljs language-js\">interface <span class=\"hljs-title class_\">TranslationRotationScaleOption</span> {\n  <span class=\"hljs-attr\">translation</span>: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Cartesian3</span> | <span class=\"hljs-title class_\">Cartesian</span>3Option | <span class=\"hljs-title class_\">CartographicInDegreeOption</span> | <span class=\"hljs-title class_\">Array</span>&lt;number&gt;\n  <span class=\"hljs-attr\">rotation</span>: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Quaternion</span> | <span class=\"hljs-title class_\">Cartesian</span>4Option | <span class=\"hljs-title class_\">Array</span>&lt;number&gt;\n  <span class=\"hljs-attr\">scale</span>: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Cartesian3</span> | <span class=\"hljs-title class_\">Cartesian</span>3Option | <span class=\"hljs-title class_\">CartographicInDegreeOption</span> | <span class=\"hljs-title class_\">Array</span>&lt;number&gt;\n}\n</code></pre><ul><li><code>Array&lt;any&gt;</code></li></ul><pre><code class=\"hljs language-js\">;[\n  (<span class=\"hljs-attr\">translation</span>: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Cartesian3</span> | <span class=\"hljs-title class_\">Cartesian</span>3Option | <span class=\"hljs-title class_\">CartographicInDegreeOption</span> | <span class=\"hljs-title class_\">Array</span>&lt;number&gt;),\n  (<span class=\"hljs-attr\">rotation</span>: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Quaternion</span> | <span class=\"hljs-title class_\">Cartesian</span>4Option | <span class=\"hljs-title class_\">Array</span>&lt;number&gt;),\n  (<span class=\"hljs-attr\">scale</span>: <span class=\"hljs-title class_\">Cesium</span>.<span class=\"hljs-property\">Cartesian3</span> | <span class=\"hljs-title class_\">Cartesian</span>3Option | <span class=\"hljs-title class_\">CartographicInDegreeOption</span> | <span class=\"hljs-title class_\">Array</span>&lt;number&gt;)\n]\n</code></pre>", 151);

function render(_ctx, _cache) {
  const _component_right_nav = Object(vue_esm_browser["resolveComponent"])("right-nav");

  return Object(vue_esm_browser["openBlock"])(), Object(vue_esm_browser["createElementBlock"])("section", _hoisted_1, [_hoisted_2, Object(vue_esm_browser["createVNode"])(_component_right_nav)]);
}
// CONCATENATED MODULE: ./website/docs/en-US/base.md?vue&type=template&id=9d710006

// CONCATENATED MODULE: ./website/docs/en-US/base.md

const script = {}
script.render = render

/* harmony default export */ var base = __webpack_exports__["default"] = (script);

/***/ })

}]);