(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[40],{

/***/ 653:
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXTERNAL MODULE: ./node_modules/vue/dist/vue.esm-browser.js
var vue_esm_browser = __webpack_require__(0);

// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/dist/templateLoader.js??ref--6!./node_modules/vue-loader/dist??ref--2-0!./website/md-loader!./website/docs/en-US/i18n.md?vue&type=template&id=5fd42b8c

var _hoisted_1 = {
  class: "content element-doc"
};

var _hoisted_2 = /*#__PURE__*/Object(vue_esm_browser["l" /* createStaticVNode */])("<h2 id=\"internationalization\"><a class=\"header-anchor\" href=\"#internationalization\">Â¶</a> Internationalization</h2><p>The default locale of VueCesium is Chinese. If you want to use another language, you&#39;ll need to do some i18n configuration. In your entry file, if you are importing VueCesium entirely:</p><pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> VueCesium <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue-cesium&#39;</span>\n<span class=\"hljs-keyword\">import</span> locale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue-cesium/lib/locale/lang/en-us&#39;</span>\n\ncreateApp(App).use(VueCesium, { locale })\n</code></pre><p>if you are importing VueCesium on demand via es modules:</p><pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> { Viewer, locale } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue-cesium&#39;</span>\n<span class=\"hljs-keyword\">import</span> lang <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue-cesium/locale/lang/en-us&#39;</span>\n\nlocale(lang)\ncreateApp(App).component(Viewer.name, Viewer)\n</code></pre><p>Or if you are importing VueCesium on demand via <a href=\"#/en-US/component/quickstart#on-demand\">babel-plugin-component</a>:</p><pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> { Viewer } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue-cesium&#39;</span>\n<span class=\"hljs-keyword\">import</span> lang <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue-cesium/lib/locale/lang/en-us&#39;</span>\n<span class=\"hljs-keyword\">import</span> locale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue-cesium/lib/locale&#39;</span>\n\n<span class=\"hljs-comment\">// configure language</span>\nlocale.use(lang)\n\n<span class=\"hljs-comment\">// import components</span>\ncreateApp(App).component(Viewer.name, Viewer)\n</code></pre><p>The English locale is imported by default, even if you&#39;re using another locale. But with NormalModuleReplacementPlugin provided by webpack you can replace default locale:</p><p><strong>webpack.config.js</strong></p><pre><code class=\"hljs language-typescript\">{\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-keyword\">new</span> webpack.NormalModuleReplacementPlugin(\n      <span class=\"hljs-regexp\">/vue-cesium[\\/\\\\]lib[\\/\\\\]locale[\\/\\\\]lang[\\/\\\\]zh-Hans/</span>,\n      <span class=\"hljs-string\">&#39;vue-cesium/lib/locale/lang/en-us&#39;</span>,\n    ),\n  ]\n}\n</code></pre><h3 id=\"compatible-vue-i18n-9.x\"><a class=\"header-anchor\" href=\"#compatible-vue-i18n-9.x\">Â¶</a> Compatible <code>vue-i18n@9.x</code></h3><p>If you need to check out <a href=\"https://vue-i18n-next.intlify.dev/guide/#html\">VueI18n documentation</a>, please click this link to check it out.</p><pre><code class=\"hljs language-typescript\"><span class=\"hljs-keyword\">import</span> { createApp } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue&#39;</span>\n<span class=\"hljs-keyword\">import</span> { createI18n } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue-i18n&#39;</span>\n<span class=\"hljs-keyword\">import</span> VueCesium <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue-cesium&#39;</span>\n<span class=\"hljs-keyword\">import</span> enLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue-cesium/lib/locale/lang/en-us&#39;</span>\n<span class=\"hljs-keyword\">import</span> zhLocale <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;vue-cesium/lib/locale/lang/zh-Hans&#39;</span>\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#39;./App.vue&#39;</span>\n\n<span class=\"hljs-keyword\">const</span> messages = {\n  [enLocale.name]: {\n    <span class=\"hljs-comment\">// vc property is critical, set this in order for VueCesium translate strings correctly.</span>\n    <span class=\"hljs-attr\">vc</span>: enLocale.vc,\n    <span class=\"hljs-comment\">// Define your own dictionary with your own namespace, but DO NOT use the namespace `vc`.</span>\n    <span class=\"hljs-comment\">// Because that makes the VueCesium internal translation invalid.</span>\n    <span class=\"hljs-attr\">message</span>: {\n      <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">&#39;hello world&#39;</span>,\n    },\n  },\n  [zhLocale.name]: {\n    <span class=\"hljs-attr\">vc</span>: zhLocale.vc,\n    <span class=\"hljs-comment\">// Define your own dictionary with your own namespace, but DO NOT use the namespace `vc`,</span>\n    <span class=\"hljs-comment\">// Because that makes the VueCesium internal translation invalid.</span>\n    <span class=\"hljs-attr\">message</span>: {\n      <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-string\">&#39;ä½ å¥½ï¼Œä¸–ç•Œ&#39;</span>,\n    },\n  },\n  <span class=\"hljs-attr\">testLocale</span>: {\n    <span class=\"hljs-attr\">vc</span>: {},\n    <span class=\"hljs-comment\">// No message translations, it will fallback to en lang, the definition of fallbackLocale is below ðŸ‘‡</span>\n  },\n}\n\n<span class=\"hljs-keyword\">const</span> i18n = createI18n({\n  <span class=\"hljs-attr\">locale</span>: zhLocale.name,\n  <span class=\"hljs-attr\">fallbackLocale</span>: enLocale.name,\n  messages,\n})\n\n<span class=\"hljs-keyword\">const</span> app = createApp(App)\n\napp.use(VueCesium, {\n  <span class=\"hljs-attr\">i18n</span>: i18n.global.t,\n})\n\n<span class=\"hljs-comment\">// Remember to use this plugin.</span>\napp.use(i18n)\n</code></pre><p>Currently VueCesium ships with the following languages:</p><ul class=\"language-list\"><li>Simplified Chinese(zh-hans)</li><li>English(en-us)</li></ul><p>If your target language is not included, you are more than welcome to contribute: just add another language config <a href=\"https://github.com/zouyaoji/vue-cesium/tree/dev/packages/locale/lang\">here</a> and create a pull request.</p>", 16);

function render(_ctx, _cache) {
  var _component_right_nav = Object(vue_esm_browser["O" /* resolveComponent */])("right-nav");

  return Object(vue_esm_browser["F" /* openBlock */])(), Object(vue_esm_browser["i" /* createBlock */])("section", _hoisted_1, [_hoisted_2, Object(vue_esm_browser["n" /* createVNode */])(_component_right_nav)]);
}
// CONCATENATED MODULE: ./website/docs/en-US/i18n.md?vue&type=template&id=5fd42b8c

// CONCATENATED MODULE: ./website/docs/en-US/i18n.md

const script = {}
script.render = render

/* harmony default export */ var i18n = __webpack_exports__["default"] = (script);

/***/ })

}]);